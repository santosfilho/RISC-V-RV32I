// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/11/2019 17:23:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    rv32i
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module rv32i_vlg_sample_tst(
	add_rd,
	add_rs1,
	add_rs2,
	clock,
	r_rs1,
	r_rs2,
	rd,
	w_rd,
	sampler_tx
);
input [4:0] add_rd;
input [4:0] add_rs1;
input [4:0] add_rs2;
input  clock;
input  r_rs1;
input  r_rs2;
input [31:0] rd;
input  w_rd;
output sampler_tx;

reg sample;
time current_time;
always @(add_rd or add_rs1 or add_rs2 or clock or r_rs1 or r_rs2 or rd or w_rd)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module rv32i_vlg_check_tst (
	rs1,
	rs2,
	sampler_rx
);
input [31:0] rs1;
input [31:0] rs2;
input sampler_rx;

reg [31:0] rs1_expected;
reg [31:0] rs2_expected;

reg [31:0] rs1_prev;
reg [31:0] rs2_prev;

reg [31:0] rs1_expected_prev;
reg [31:0] rs2_expected_prev;

reg [31:0] last_rs1_exp;
reg [31:0] last_rs2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	rs1_prev = rs1;
	rs2_prev = rs2;
end

// update expected /o prevs

always @(trigger)
begin
	rs1_expected_prev = rs1_expected;
	rs2_expected_prev = rs2_expected;
end


// expected rs1[ 31 ]
initial
begin
	rs1_expected[31] = 1'bX;
end 
// expected rs1[ 30 ]
initial
begin
	rs1_expected[30] = 1'bX;
end 
// expected rs1[ 29 ]
initial
begin
	rs1_expected[29] = 1'bX;
end 
// expected rs1[ 28 ]
initial
begin
	rs1_expected[28] = 1'bX;
end 
// expected rs1[ 27 ]
initial
begin
	rs1_expected[27] = 1'bX;
end 
// expected rs1[ 26 ]
initial
begin
	rs1_expected[26] = 1'bX;
end 
// expected rs1[ 25 ]
initial
begin
	rs1_expected[25] = 1'bX;
end 
// expected rs1[ 24 ]
initial
begin
	rs1_expected[24] = 1'bX;
end 
// expected rs1[ 23 ]
initial
begin
	rs1_expected[23] = 1'bX;
end 
// expected rs1[ 22 ]
initial
begin
	rs1_expected[22] = 1'bX;
end 
// expected rs1[ 21 ]
initial
begin
	rs1_expected[21] = 1'bX;
end 
// expected rs1[ 20 ]
initial
begin
	rs1_expected[20] = 1'bX;
end 
// expected rs1[ 19 ]
initial
begin
	rs1_expected[19] = 1'bX;
end 
// expected rs1[ 18 ]
initial
begin
	rs1_expected[18] = 1'bX;
end 
// expected rs1[ 17 ]
initial
begin
	rs1_expected[17] = 1'bX;
end 
// expected rs1[ 16 ]
initial
begin
	rs1_expected[16] = 1'bX;
end 
// expected rs1[ 15 ]
initial
begin
	rs1_expected[15] = 1'bX;
end 
// expected rs1[ 14 ]
initial
begin
	rs1_expected[14] = 1'bX;
end 
// expected rs1[ 13 ]
initial
begin
	rs1_expected[13] = 1'bX;
end 
// expected rs1[ 12 ]
initial
begin
	rs1_expected[12] = 1'bX;
end 
// expected rs1[ 11 ]
initial
begin
	rs1_expected[11] = 1'bX;
end 
// expected rs1[ 10 ]
initial
begin
	rs1_expected[10] = 1'bX;
end 
// expected rs1[ 9 ]
initial
begin
	rs1_expected[9] = 1'bX;
end 
// expected rs1[ 8 ]
initial
begin
	rs1_expected[8] = 1'bX;
end 
// expected rs1[ 7 ]
initial
begin
	rs1_expected[7] = 1'bX;
end 
// expected rs1[ 6 ]
initial
begin
	rs1_expected[6] = 1'bX;
end 
// expected rs1[ 5 ]
initial
begin
	rs1_expected[5] = 1'bX;
end 
// expected rs1[ 4 ]
initial
begin
	rs1_expected[4] = 1'bX;
end 
// expected rs1[ 3 ]
initial
begin
	rs1_expected[3] = 1'bX;
end 
// expected rs1[ 2 ]
initial
begin
	rs1_expected[2] = 1'bX;
end 
// expected rs1[ 1 ]
initial
begin
	rs1_expected[1] = 1'bX;
end 
// expected rs1[ 0 ]
initial
begin
	rs1_expected[0] = 1'bX;
end 
// expected rs2[ 31 ]
initial
begin
	rs2_expected[31] = 1'bX;
end 
// expected rs2[ 30 ]
initial
begin
	rs2_expected[30] = 1'bX;
end 
// expected rs2[ 29 ]
initial
begin
	rs2_expected[29] = 1'bX;
end 
// expected rs2[ 28 ]
initial
begin
	rs2_expected[28] = 1'bX;
end 
// expected rs2[ 27 ]
initial
begin
	rs2_expected[27] = 1'bX;
end 
// expected rs2[ 26 ]
initial
begin
	rs2_expected[26] = 1'bX;
end 
// expected rs2[ 25 ]
initial
begin
	rs2_expected[25] = 1'bX;
end 
// expected rs2[ 24 ]
initial
begin
	rs2_expected[24] = 1'bX;
end 
// expected rs2[ 23 ]
initial
begin
	rs2_expected[23] = 1'bX;
end 
// expected rs2[ 22 ]
initial
begin
	rs2_expected[22] = 1'bX;
end 
// expected rs2[ 21 ]
initial
begin
	rs2_expected[21] = 1'bX;
end 
// expected rs2[ 20 ]
initial
begin
	rs2_expected[20] = 1'bX;
end 
// expected rs2[ 19 ]
initial
begin
	rs2_expected[19] = 1'bX;
end 
// expected rs2[ 18 ]
initial
begin
	rs2_expected[18] = 1'bX;
end 
// expected rs2[ 17 ]
initial
begin
	rs2_expected[17] = 1'bX;
end 
// expected rs2[ 16 ]
initial
begin
	rs2_expected[16] = 1'bX;
end 
// expected rs2[ 15 ]
initial
begin
	rs2_expected[15] = 1'bX;
end 
// expected rs2[ 14 ]
initial
begin
	rs2_expected[14] = 1'bX;
end 
// expected rs2[ 13 ]
initial
begin
	rs2_expected[13] = 1'bX;
end 
// expected rs2[ 12 ]
initial
begin
	rs2_expected[12] = 1'bX;
end 
// expected rs2[ 11 ]
initial
begin
	rs2_expected[11] = 1'bX;
end 
// expected rs2[ 10 ]
initial
begin
	rs2_expected[10] = 1'bX;
end 
// expected rs2[ 9 ]
initial
begin
	rs2_expected[9] = 1'bX;
end 
// expected rs2[ 8 ]
initial
begin
	rs2_expected[8] = 1'bX;
end 
// expected rs2[ 7 ]
initial
begin
	rs2_expected[7] = 1'bX;
end 
// expected rs2[ 6 ]
initial
begin
	rs2_expected[6] = 1'bX;
end 
// expected rs2[ 5 ]
initial
begin
	rs2_expected[5] = 1'bX;
end 
// expected rs2[ 4 ]
initial
begin
	rs2_expected[4] = 1'bX;
end 
// expected rs2[ 3 ]
initial
begin
	rs2_expected[3] = 1'bX;
end 
// expected rs2[ 2 ]
initial
begin
	rs2_expected[2] = 1'bX;
end 
// expected rs2[ 1 ]
initial
begin
	rs2_expected[1] = 1'bX;
end 
// expected rs2[ 0 ]
initial
begin
	rs2_expected[0] = 1'bX;
end 
// generate trigger
always @(rs1_expected or rs1 or rs2_expected or rs2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected rs1 = %b | expected rs2 = %b | ",rs1_expected_prev,rs2_expected_prev);
	$display("| real rs1 = %b | real rs2 = %b | ",rs1_prev,rs2_prev);
`endif
	if (
		( rs1_expected_prev[0] !== 1'bx ) && ( rs1_prev[0] !== rs1_expected_prev[0] )
		&& ((rs1_expected_prev[0] !== last_rs1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[0] = rs1_expected_prev[0];
	end
	if (
		( rs1_expected_prev[1] !== 1'bx ) && ( rs1_prev[1] !== rs1_expected_prev[1] )
		&& ((rs1_expected_prev[1] !== last_rs1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[1] = rs1_expected_prev[1];
	end
	if (
		( rs1_expected_prev[2] !== 1'bx ) && ( rs1_prev[2] !== rs1_expected_prev[2] )
		&& ((rs1_expected_prev[2] !== last_rs1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[2] = rs1_expected_prev[2];
	end
	if (
		( rs1_expected_prev[3] !== 1'bx ) && ( rs1_prev[3] !== rs1_expected_prev[3] )
		&& ((rs1_expected_prev[3] !== last_rs1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[3] = rs1_expected_prev[3];
	end
	if (
		( rs1_expected_prev[4] !== 1'bx ) && ( rs1_prev[4] !== rs1_expected_prev[4] )
		&& ((rs1_expected_prev[4] !== last_rs1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[4] = rs1_expected_prev[4];
	end
	if (
		( rs1_expected_prev[5] !== 1'bx ) && ( rs1_prev[5] !== rs1_expected_prev[5] )
		&& ((rs1_expected_prev[5] !== last_rs1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[5] = rs1_expected_prev[5];
	end
	if (
		( rs1_expected_prev[6] !== 1'bx ) && ( rs1_prev[6] !== rs1_expected_prev[6] )
		&& ((rs1_expected_prev[6] !== last_rs1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[6] = rs1_expected_prev[6];
	end
	if (
		( rs1_expected_prev[7] !== 1'bx ) && ( rs1_prev[7] !== rs1_expected_prev[7] )
		&& ((rs1_expected_prev[7] !== last_rs1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[7] = rs1_expected_prev[7];
	end
	if (
		( rs1_expected_prev[8] !== 1'bx ) && ( rs1_prev[8] !== rs1_expected_prev[8] )
		&& ((rs1_expected_prev[8] !== last_rs1_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[8] = rs1_expected_prev[8];
	end
	if (
		( rs1_expected_prev[9] !== 1'bx ) && ( rs1_prev[9] !== rs1_expected_prev[9] )
		&& ((rs1_expected_prev[9] !== last_rs1_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[9] = rs1_expected_prev[9];
	end
	if (
		( rs1_expected_prev[10] !== 1'bx ) && ( rs1_prev[10] !== rs1_expected_prev[10] )
		&& ((rs1_expected_prev[10] !== last_rs1_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[10] = rs1_expected_prev[10];
	end
	if (
		( rs1_expected_prev[11] !== 1'bx ) && ( rs1_prev[11] !== rs1_expected_prev[11] )
		&& ((rs1_expected_prev[11] !== last_rs1_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[11] = rs1_expected_prev[11];
	end
	if (
		( rs1_expected_prev[12] !== 1'bx ) && ( rs1_prev[12] !== rs1_expected_prev[12] )
		&& ((rs1_expected_prev[12] !== last_rs1_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[12] = rs1_expected_prev[12];
	end
	if (
		( rs1_expected_prev[13] !== 1'bx ) && ( rs1_prev[13] !== rs1_expected_prev[13] )
		&& ((rs1_expected_prev[13] !== last_rs1_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[13] = rs1_expected_prev[13];
	end
	if (
		( rs1_expected_prev[14] !== 1'bx ) && ( rs1_prev[14] !== rs1_expected_prev[14] )
		&& ((rs1_expected_prev[14] !== last_rs1_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[14] = rs1_expected_prev[14];
	end
	if (
		( rs1_expected_prev[15] !== 1'bx ) && ( rs1_prev[15] !== rs1_expected_prev[15] )
		&& ((rs1_expected_prev[15] !== last_rs1_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[15] = rs1_expected_prev[15];
	end
	if (
		( rs1_expected_prev[16] !== 1'bx ) && ( rs1_prev[16] !== rs1_expected_prev[16] )
		&& ((rs1_expected_prev[16] !== last_rs1_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[16] = rs1_expected_prev[16];
	end
	if (
		( rs1_expected_prev[17] !== 1'bx ) && ( rs1_prev[17] !== rs1_expected_prev[17] )
		&& ((rs1_expected_prev[17] !== last_rs1_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[17] = rs1_expected_prev[17];
	end
	if (
		( rs1_expected_prev[18] !== 1'bx ) && ( rs1_prev[18] !== rs1_expected_prev[18] )
		&& ((rs1_expected_prev[18] !== last_rs1_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[18] = rs1_expected_prev[18];
	end
	if (
		( rs1_expected_prev[19] !== 1'bx ) && ( rs1_prev[19] !== rs1_expected_prev[19] )
		&& ((rs1_expected_prev[19] !== last_rs1_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[19] = rs1_expected_prev[19];
	end
	if (
		( rs1_expected_prev[20] !== 1'bx ) && ( rs1_prev[20] !== rs1_expected_prev[20] )
		&& ((rs1_expected_prev[20] !== last_rs1_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[20] = rs1_expected_prev[20];
	end
	if (
		( rs1_expected_prev[21] !== 1'bx ) && ( rs1_prev[21] !== rs1_expected_prev[21] )
		&& ((rs1_expected_prev[21] !== last_rs1_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[21] = rs1_expected_prev[21];
	end
	if (
		( rs1_expected_prev[22] !== 1'bx ) && ( rs1_prev[22] !== rs1_expected_prev[22] )
		&& ((rs1_expected_prev[22] !== last_rs1_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[22] = rs1_expected_prev[22];
	end
	if (
		( rs1_expected_prev[23] !== 1'bx ) && ( rs1_prev[23] !== rs1_expected_prev[23] )
		&& ((rs1_expected_prev[23] !== last_rs1_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[23] = rs1_expected_prev[23];
	end
	if (
		( rs1_expected_prev[24] !== 1'bx ) && ( rs1_prev[24] !== rs1_expected_prev[24] )
		&& ((rs1_expected_prev[24] !== last_rs1_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[24] = rs1_expected_prev[24];
	end
	if (
		( rs1_expected_prev[25] !== 1'bx ) && ( rs1_prev[25] !== rs1_expected_prev[25] )
		&& ((rs1_expected_prev[25] !== last_rs1_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[25] = rs1_expected_prev[25];
	end
	if (
		( rs1_expected_prev[26] !== 1'bx ) && ( rs1_prev[26] !== rs1_expected_prev[26] )
		&& ((rs1_expected_prev[26] !== last_rs1_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[26] = rs1_expected_prev[26];
	end
	if (
		( rs1_expected_prev[27] !== 1'bx ) && ( rs1_prev[27] !== rs1_expected_prev[27] )
		&& ((rs1_expected_prev[27] !== last_rs1_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[27] = rs1_expected_prev[27];
	end
	if (
		( rs1_expected_prev[28] !== 1'bx ) && ( rs1_prev[28] !== rs1_expected_prev[28] )
		&& ((rs1_expected_prev[28] !== last_rs1_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[28] = rs1_expected_prev[28];
	end
	if (
		( rs1_expected_prev[29] !== 1'bx ) && ( rs1_prev[29] !== rs1_expected_prev[29] )
		&& ((rs1_expected_prev[29] !== last_rs1_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[29] = rs1_expected_prev[29];
	end
	if (
		( rs1_expected_prev[30] !== 1'bx ) && ( rs1_prev[30] !== rs1_expected_prev[30] )
		&& ((rs1_expected_prev[30] !== last_rs1_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[30] = rs1_expected_prev[30];
	end
	if (
		( rs1_expected_prev[31] !== 1'bx ) && ( rs1_prev[31] !== rs1_expected_prev[31] )
		&& ((rs1_expected_prev[31] !== last_rs1_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_expected_prev);
		$display ("     Real value = %b", rs1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rs1_exp[31] = rs1_expected_prev[31];
	end
	if (
		( rs2_expected_prev[0] !== 1'bx ) && ( rs2_prev[0] !== rs2_expected_prev[0] )
		&& ((rs2_expected_prev[0] !== last_rs2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[0] = rs2_expected_prev[0];
	end
	if (
		( rs2_expected_prev[1] !== 1'bx ) && ( rs2_prev[1] !== rs2_expected_prev[1] )
		&& ((rs2_expected_prev[1] !== last_rs2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[1] = rs2_expected_prev[1];
	end
	if (
		( rs2_expected_prev[2] !== 1'bx ) && ( rs2_prev[2] !== rs2_expected_prev[2] )
		&& ((rs2_expected_prev[2] !== last_rs2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[2] = rs2_expected_prev[2];
	end
	if (
		( rs2_expected_prev[3] !== 1'bx ) && ( rs2_prev[3] !== rs2_expected_prev[3] )
		&& ((rs2_expected_prev[3] !== last_rs2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[3] = rs2_expected_prev[3];
	end
	if (
		( rs2_expected_prev[4] !== 1'bx ) && ( rs2_prev[4] !== rs2_expected_prev[4] )
		&& ((rs2_expected_prev[4] !== last_rs2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[4] = rs2_expected_prev[4];
	end
	if (
		( rs2_expected_prev[5] !== 1'bx ) && ( rs2_prev[5] !== rs2_expected_prev[5] )
		&& ((rs2_expected_prev[5] !== last_rs2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[5] = rs2_expected_prev[5];
	end
	if (
		( rs2_expected_prev[6] !== 1'bx ) && ( rs2_prev[6] !== rs2_expected_prev[6] )
		&& ((rs2_expected_prev[6] !== last_rs2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[6] = rs2_expected_prev[6];
	end
	if (
		( rs2_expected_prev[7] !== 1'bx ) && ( rs2_prev[7] !== rs2_expected_prev[7] )
		&& ((rs2_expected_prev[7] !== last_rs2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[7] = rs2_expected_prev[7];
	end
	if (
		( rs2_expected_prev[8] !== 1'bx ) && ( rs2_prev[8] !== rs2_expected_prev[8] )
		&& ((rs2_expected_prev[8] !== last_rs2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[8] = rs2_expected_prev[8];
	end
	if (
		( rs2_expected_prev[9] !== 1'bx ) && ( rs2_prev[9] !== rs2_expected_prev[9] )
		&& ((rs2_expected_prev[9] !== last_rs2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[9] = rs2_expected_prev[9];
	end
	if (
		( rs2_expected_prev[10] !== 1'bx ) && ( rs2_prev[10] !== rs2_expected_prev[10] )
		&& ((rs2_expected_prev[10] !== last_rs2_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[10] = rs2_expected_prev[10];
	end
	if (
		( rs2_expected_prev[11] !== 1'bx ) && ( rs2_prev[11] !== rs2_expected_prev[11] )
		&& ((rs2_expected_prev[11] !== last_rs2_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[11] = rs2_expected_prev[11];
	end
	if (
		( rs2_expected_prev[12] !== 1'bx ) && ( rs2_prev[12] !== rs2_expected_prev[12] )
		&& ((rs2_expected_prev[12] !== last_rs2_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[12] = rs2_expected_prev[12];
	end
	if (
		( rs2_expected_prev[13] !== 1'bx ) && ( rs2_prev[13] !== rs2_expected_prev[13] )
		&& ((rs2_expected_prev[13] !== last_rs2_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[13] = rs2_expected_prev[13];
	end
	if (
		( rs2_expected_prev[14] !== 1'bx ) && ( rs2_prev[14] !== rs2_expected_prev[14] )
		&& ((rs2_expected_prev[14] !== last_rs2_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[14] = rs2_expected_prev[14];
	end
	if (
		( rs2_expected_prev[15] !== 1'bx ) && ( rs2_prev[15] !== rs2_expected_prev[15] )
		&& ((rs2_expected_prev[15] !== last_rs2_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[15] = rs2_expected_prev[15];
	end
	if (
		( rs2_expected_prev[16] !== 1'bx ) && ( rs2_prev[16] !== rs2_expected_prev[16] )
		&& ((rs2_expected_prev[16] !== last_rs2_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[16] = rs2_expected_prev[16];
	end
	if (
		( rs2_expected_prev[17] !== 1'bx ) && ( rs2_prev[17] !== rs2_expected_prev[17] )
		&& ((rs2_expected_prev[17] !== last_rs2_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[17] = rs2_expected_prev[17];
	end
	if (
		( rs2_expected_prev[18] !== 1'bx ) && ( rs2_prev[18] !== rs2_expected_prev[18] )
		&& ((rs2_expected_prev[18] !== last_rs2_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[18] = rs2_expected_prev[18];
	end
	if (
		( rs2_expected_prev[19] !== 1'bx ) && ( rs2_prev[19] !== rs2_expected_prev[19] )
		&& ((rs2_expected_prev[19] !== last_rs2_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[19] = rs2_expected_prev[19];
	end
	if (
		( rs2_expected_prev[20] !== 1'bx ) && ( rs2_prev[20] !== rs2_expected_prev[20] )
		&& ((rs2_expected_prev[20] !== last_rs2_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[20] = rs2_expected_prev[20];
	end
	if (
		( rs2_expected_prev[21] !== 1'bx ) && ( rs2_prev[21] !== rs2_expected_prev[21] )
		&& ((rs2_expected_prev[21] !== last_rs2_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[21] = rs2_expected_prev[21];
	end
	if (
		( rs2_expected_prev[22] !== 1'bx ) && ( rs2_prev[22] !== rs2_expected_prev[22] )
		&& ((rs2_expected_prev[22] !== last_rs2_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[22] = rs2_expected_prev[22];
	end
	if (
		( rs2_expected_prev[23] !== 1'bx ) && ( rs2_prev[23] !== rs2_expected_prev[23] )
		&& ((rs2_expected_prev[23] !== last_rs2_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[23] = rs2_expected_prev[23];
	end
	if (
		( rs2_expected_prev[24] !== 1'bx ) && ( rs2_prev[24] !== rs2_expected_prev[24] )
		&& ((rs2_expected_prev[24] !== last_rs2_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[24] = rs2_expected_prev[24];
	end
	if (
		( rs2_expected_prev[25] !== 1'bx ) && ( rs2_prev[25] !== rs2_expected_prev[25] )
		&& ((rs2_expected_prev[25] !== last_rs2_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[25] = rs2_expected_prev[25];
	end
	if (
		( rs2_expected_prev[26] !== 1'bx ) && ( rs2_prev[26] !== rs2_expected_prev[26] )
		&& ((rs2_expected_prev[26] !== last_rs2_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[26] = rs2_expected_prev[26];
	end
	if (
		( rs2_expected_prev[27] !== 1'bx ) && ( rs2_prev[27] !== rs2_expected_prev[27] )
		&& ((rs2_expected_prev[27] !== last_rs2_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[27] = rs2_expected_prev[27];
	end
	if (
		( rs2_expected_prev[28] !== 1'bx ) && ( rs2_prev[28] !== rs2_expected_prev[28] )
		&& ((rs2_expected_prev[28] !== last_rs2_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[28] = rs2_expected_prev[28];
	end
	if (
		( rs2_expected_prev[29] !== 1'bx ) && ( rs2_prev[29] !== rs2_expected_prev[29] )
		&& ((rs2_expected_prev[29] !== last_rs2_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[29] = rs2_expected_prev[29];
	end
	if (
		( rs2_expected_prev[30] !== 1'bx ) && ( rs2_prev[30] !== rs2_expected_prev[30] )
		&& ((rs2_expected_prev[30] !== last_rs2_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[30] = rs2_expected_prev[30];
	end
	if (
		( rs2_expected_prev[31] !== 1'bx ) && ( rs2_prev[31] !== rs2_expected_prev[31] )
		&& ((rs2_expected_prev[31] !== last_rs2_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_expected_prev);
		$display ("     Real value = %b", rs2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rs2_exp[31] = rs2_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#700000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module rv32i_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] add_rd;
reg [4:0] add_rs1;
reg [4:0] add_rs2;
reg clock;
reg r_rs1;
reg r_rs2;
reg [31:0] rd;
reg w_rd;
// wires                                               
wire [31:0] rs1;
wire [31:0] rs2;

wire sampler;                             

// assign statements (if any)                          
rv32i i1 (
// port map - connection between master ports and signals/registers   
	.add_rd(add_rd),
	.add_rs1(add_rs1),
	.add_rs2(add_rs2),
	.clock(clock),
	.r_rs1(r_rs1),
	.r_rs2(r_rs2),
	.rd(rd),
	.rs1(rs1),
	.rs2(rs2),
	.w_rd(w_rd)
);

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

// w_rd
initial
begin
	w_rd = 1'b1;
	w_rd = #320000 1'b0;
end 
// add_rd[ 4 ]
initial
begin
	repeat(2)
	begin
		add_rd[4] = 1'b0;
		add_rd[4] = #160000 1'b1;
		# 160000;
	end
	add_rd[4] = 1'b0;
end 
// add_rd[ 3 ]
initial
begin
	repeat(4)
	begin
		add_rd[3] = 1'b0;
		add_rd[3] = #80000 1'b1;
		# 80000;
	end
	add_rd[3] = 1'b0;
end 
// add_rd[ 2 ]
initial
begin
	repeat(8)
	begin
		add_rd[2] = 1'b0;
		add_rd[2] = #40000 1'b1;
		# 40000;
	end
	add_rd[2] = 1'b0;
	add_rd[2] = #40000 1'b1;
end 
// add_rd[ 1 ]
initial
begin
	repeat(17)
	begin
		add_rd[1] = 1'b0;
		add_rd[1] = #20000 1'b1;
		# 20000;
	end
	add_rd[1] = 1'b0;
end 
// add_rd[ 0 ]
always
begin
	add_rd[0] = 1'b0;
	add_rd[0] = #10000 1'b1;
	#10000;
end 
// rd[ 31 ]
initial
begin
	rd[31] = 1'b0;
end 
// rd[ 30 ]
initial
begin
	rd[30] = 1'b0;
end 
// rd[ 29 ]
initial
begin
	rd[29] = 1'b0;
end 
// rd[ 28 ]
initial
begin
	rd[28] = 1'b0;
end 
// rd[ 27 ]
initial
begin
	rd[27] = 1'b0;
end 
// rd[ 26 ]
initial
begin
	rd[26] = 1'b0;
end 
// rd[ 25 ]
initial
begin
	rd[25] = 1'b0;
end 
// rd[ 24 ]
initial
begin
	rd[24] = 1'b0;
end 
// rd[ 23 ]
initial
begin
	rd[23] = 1'b0;
end 
// rd[ 22 ]
initial
begin
	rd[22] = 1'b0;
end 
// rd[ 21 ]
initial
begin
	rd[21] = 1'b0;
end 
// rd[ 20 ]
initial
begin
	rd[20] = 1'b0;
end 
// rd[ 19 ]
initial
begin
	rd[19] = 1'b0;
end 
// rd[ 18 ]
initial
begin
	rd[18] = 1'b0;
end 
// rd[ 17 ]
initial
begin
	rd[17] = 1'b0;
end 
// rd[ 16 ]
initial
begin
	rd[16] = 1'b0;
end 
// rd[ 15 ]
initial
begin
	rd[15] = 1'b0;
end 
// rd[ 14 ]
initial
begin
	rd[14] = 1'b0;
end 
// rd[ 13 ]
initial
begin
	rd[13] = 1'b0;
end 
// rd[ 12 ]
initial
begin
	rd[12] = 1'b0;
end 
// rd[ 11 ]
initial
begin
	rd[11] = 1'b0;
end 
// rd[ 10 ]
initial
begin
	rd[10] = 1'b0;
end 
// rd[ 9 ]
initial
begin
	rd[9] = 1'b0;
end 
// rd[ 8 ]
initial
begin
	rd[8] = 1'b0;
end 
// rd[ 7 ]
initial
begin
	rd[7] = 1'b0;
end 
// rd[ 6 ]
initial
begin
	rd[6] = 1'b0;
	rd[6] = #640000 1'b1;
end 
// rd[ 5 ]
initial
begin
	rd[5] = 1'b0;
	rd[5] = #320000 1'b1;
	rd[5] = #320000 1'b0;
end 
// rd[ 4 ]
initial
begin
	repeat(2)
	begin
		rd[4] = 1'b0;
		rd[4] = #160000 1'b1;
		# 160000;
	end
	rd[4] = 1'b0;
end 
// rd[ 3 ]
initial
begin
	repeat(4)
	begin
		rd[3] = 1'b0;
		rd[3] = #80000 1'b1;
		# 80000;
	end
	rd[3] = 1'b0;
end 
// rd[ 2 ]
initial
begin
	repeat(8)
	begin
		rd[2] = 1'b0;
		rd[2] = #40000 1'b1;
		# 40000;
	end
	rd[2] = 1'b0;
	rd[2] = #40000 1'b1;
end 
// rd[ 1 ]
initial
begin
	repeat(17)
	begin
		rd[1] = 1'b0;
		rd[1] = #20000 1'b1;
		# 20000;
	end
	rd[1] = 1'b0;
end 
// rd[ 0 ]
always
begin
	rd[0] = 1'b0;
	rd[0] = #10000 1'b1;
	#10000;
end 

// r_rs1
initial
begin
	r_rs1 = 1'b1;
end 
// add_rs1[ 4 ]
initial
begin
	add_rs1[4] = 1'b0;
	add_rs1[4] = #400000 1'b1;
	add_rs1[4] = #80000 1'b0;
	add_rs1[4] = #80000 1'b1;
	add_rs1[4] = #80000 1'b0;
end 
// add_rs1[ 3 ]
initial
begin
	add_rs1[3] = 1'b0;
	add_rs1[3] = #360000 1'b1;
	# 40000;
	repeat(3)
	begin
		add_rs1[3] = 1'b0;
		add_rs1[3] = #40000 1'b1;
		# 40000;
	end
	add_rs1[3] = 1'b0;
	add_rs1[3] = #40000 1'b1;
end 
// add_rs1[ 2 ]
initial
begin
	add_rs1[2] = 1'b0;
	add_rs1[2] = #340000 1'b1;
	# 20000;
	repeat(8)
	begin
		add_rs1[2] = 1'b0;
		add_rs1[2] = #20000 1'b1;
		# 20000;
	end
	add_rs1[2] = 1'b0;
end 
// add_rs1[ 1 ]
initial
begin
	add_rs1[1] = 1'b0;
	add_rs1[1] = #330000 1'b1;
	# 10000;
	repeat(18)
	begin
		add_rs1[1] = 1'b0;
		add_rs1[1] = #10000 1'b1;
		# 10000;
	end
end 
// add_rs1[ 0 ]
initial
begin
	add_rs1[0] = 1'b0;
end 

// r_rs2
initial
begin
	r_rs2 = 1'b1;
end 
// add_rs2[ 4 ]
initial
begin
	add_rs2[4] = 1'b0;
	add_rs2[4] = #410000 1'b1;
	add_rs2[4] = #80000 1'b0;
	add_rs2[4] = #80000 1'b1;
	add_rs2[4] = #80000 1'b0;
end 
// add_rs2[ 3 ]
initial
begin
	add_rs2[3] = 1'b0;
	add_rs2[3] = #370000 1'b1;
	# 40000;
	repeat(3)
	begin
		add_rs2[3] = 1'b0;
		add_rs2[3] = #40000 1'b1;
		# 40000;
	end
	add_rs2[3] = 1'b0;
	add_rs2[3] = #40000 1'b1;
end 
// add_rs2[ 2 ]
initial
begin
	add_rs2[2] = 1'b0;
	add_rs2[2] = #350000 1'b1;
	# 20000;
	repeat(8)
	begin
		add_rs2[2] = 1'b0;
		add_rs2[2] = #20000 1'b1;
		# 20000;
	end
	add_rs2[2] = 1'b0;
end 
// add_rs2[ 1 ]
initial
begin
	add_rs2[1] = 1'b0;
	add_rs2[1] = #340000 1'b1;
	# 10000;
	repeat(17)
	begin
		add_rs2[1] = 1'b0;
		add_rs2[1] = #10000 1'b1;
		# 10000;
	end
	add_rs2[1] = 1'b0;
end 
// add_rs2[ 0 ]
initial
begin
	add_rs2[0] = 1'b0;
	add_rs2[0] = #330000 1'b1;
end 

rv32i_vlg_sample_tst tb_sample (
	.add_rd(add_rd),
	.add_rs1(add_rs1),
	.add_rs2(add_rs2),
	.clock(clock),
	.r_rs1(r_rs1),
	.r_rs2(r_rs2),
	.rd(rd),
	.w_rd(w_rd),
	.sampler_tx(sampler)
);

rv32i_vlg_check_tst tb_out(
	.rs1(rs1),
	.rs2(rs2),
	.sampler_rx(sampler)
);
endmodule

